{"name": "Search for a Product on Amazon and Add to Cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=130.0.6723.59)\nStacktrace:\n\tGetHandleVerifier [0x00007FF70353E1F5+2972373]\n\t(No symbol) [0x00007FF7031D55F0]\n\t(No symbol) [0x00007FF7030757FA]\n\t(No symbol) [0x00007FF70304FA85]\n\t(No symbol) [0x00007FF7030F2B17]\n\t(No symbol) [0x00007FF70310B1D1]\n\t(No symbol) [0x00007FF7030EB823]\n\t(No symbol) [0x00007FF7030B75E8]\n\t(No symbol) [0x00007FF7030B8751]\n\tGetHandleVerifier [0x00007FF7035647BD+3129501]\n\tGetHandleVerifier [0x00007FF7035B4D00+3458528]\n\tGetHandleVerifier [0x00007FF7035AB05D+3418429]\n\tGetHandleVerifier [0x00007FF70333687B+844123]\n\t(No symbol) [0x00007FF7031E0AFF]\n\t(No symbol) [0x00007FF7031DC6D4]\n\t(No symbol) [0x00007FF7031DC86D]\n\t(No symbol) [0x00007FF7031CBD79]\n\tBaseThreadInitThunk [0x00007FFE7025257D+29]\n\tRtlUserThreadStart [0x00007FFE71E8AF08+40]", "trace": "@allure.title(\"Search for a Product on Amazon and Add to Cart\")\n    def test_amazon_search_add_to_cart():\n        # Initialize the driver\n        driver = webdriver.Chrome()\n    \n        with allure.step(\"Open Amazon website\"):\n            driver.get(\"https://www.amazon.com\")\n    \n        try:\n            with allure.step(\"Search for laptops\"):\n>               search_box = WebDriverWait(driver, 20).until(\n                    EC.presence_of_element_located((By.ID, \"twotabsearchtextbox\"))\n                )\n\ntest_cases.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:84: in _predicate\n    return driver.find_element(*locator)\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C7CC70D2D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7031CBD79]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE7025257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFE71E8AF08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=130.0.6723.59)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF70353E1F5+2972373]\nE       \t(No symbol) [0x00007FF7031D55F0]\nE       \t(No symbol) [0x00007FF7030757FA]\nE       \t(No symbol) [0x00007FF70304FA85]\nE       \t(No symbol) [0x00007FF7030F2B17]\nE       \t(No symbol) [0x00007FF70310B1D1]\nE       \t(No symbol) [0x00007FF7030EB823]\nE       \t(No symbol) [0x00007FF7030B75E8]\nE       \t(No symbol) [0x00007FF7030B8751]\nE       \tGetHandleVerifier [0x00007FF7035647BD+3129501]\nE       \tGetHandleVerifier [0x00007FF7035B4D00+3458528]\nE       \tGetHandleVerifier [0x00007FF7035AB05D+3418429]\nE       \tGetHandleVerifier [0x00007FF70333687B+844123]\nE       \t(No symbol) [0x00007FF7031E0AFF]\nE       \t(No symbol) [0x00007FF7031DC6D4]\nE       \t(No symbol) [0x00007FF7031DC86D]\nE       \t(No symbol) [0x00007FF7031CBD79]\nE       \tBaseThreadInitThunk [0x00007FFE7025257D+29]\nE       \tRtlUserThreadStart [0x00007FFE71E8AF08+40]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.title(\"Search for a Product on Amazon and Add to Cart\")\n    def test_amazon_search_add_to_cart():\n        # Initialize the driver\n        driver = webdriver.Chrome()\n    \n        with allure.step(\"Open Amazon website\"):\n            driver.get(\"https://www.amazon.com\")\n    \n        try:\n            with allure.step(\"Search for laptops\"):\n                search_box = WebDriverWait(driver, 20).until(\n                    EC.presence_of_element_located((By.ID, \"twotabsearchtextbox\"))\n                )\n                search_box.send_keys(\"laptops\")\n                search_box.submit()\n    \n            with allure.step(\"Wait for products section and select the first product\"):\n                products_section = WebDriverWait(driver, 10).until(\n                    EC.presence_of_element_located((By.CSS_SELECTOR, \"div.s-main-slot\"))\n                )\n                first_product = products_section.find_element(By.CSS_SELECTOR, \"h2 a span\")\n                first_product.click()\n    \n            with allure.step(\"Add the product to the cart\"):\n                add_to_cart_button = WebDriverWait(driver, 10).until(\n                    EC.element_to_be_clickable((By.ID, \"add-to-cart-button\"))\n                )\n                driver.execute_script(\"arguments[0].scrollIntoView();\", add_to_cart_button)\n                add_to_cart_button.click()\n    \n            with allure.step(\"Verify that the product was added to the cart\"):\n                # You can add more validation here based on your requirements\n                cart_count = WebDriverWait(driver, 10).until(\n                    EC.presence_of_element_located((By.ID, \"nav-cart-count\"))\n                )\n                assert int(cart_count.text) > 0, \"Product not added to the cart\"\n    \n        except Exception as e:\n>           allure.attach(driver.get_screenshot_as_png(), name=\"screenshot\", attachment_type=allure.attachment_type.PNG)\n\ntest_cases.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:839: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:850: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C7CC70D2D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF7031CBD79]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE7025257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFE71E8AF08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=130.0.6723.59)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF70353E1F5+2972373]\nE       \t(No symbol) [0x00007FF7031D55F0]\nE       \t(No symbol) [0x00007FF7030757FA]\nE       \t(No symbol) [0x00007FF70304FA85]\nE       \t(No symbol) [0x00007FF7030F2B17]\nE       \t(No symbol) [0x00007FF70310B1D1]\nE       \t(No symbol) [0x00007FF7030EB823]\nE       \t(No symbol) [0x00007FF7030B75E8]\nE       \t(No symbol) [0x00007FF7030B8751]\nE       \tGetHandleVerifier [0x00007FF7035647BD+3129501]\nE       \tGetHandleVerifier [0x00007FF7035B4D00+3458528]\nE       \tGetHandleVerifier [0x00007FF7035AB05D+3418429]\nE       \tGetHandleVerifier [0x00007FF70333687B+844123]\nE       \t(No symbol) [0x00007FF7031E0AFF]\nE       \t(No symbol) [0x00007FF7031DC6D4]\nE       \t(No symbol) [0x00007FF7031DC86D]\nE       \t(No symbol) [0x00007FF7031CBD79]\nE       \tBaseThreadInitThunk [0x00007FFE7025257D+29]\nE       \tRtlUserThreadStart [0x00007FFE71E8AF08+40]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "steps": [{"name": "Open Amazon website", "status": "passed", "start": 1729170673769, "stop": 1729170675817}, {"name": "Search for laptops", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=130.0.6723.59)\nStacktrace:\n\tGetHandleVerifier [0x00007FF70353E1F5+2972373]\n\t(No symbol) [0x00007FF7031D55F0]\n\t(No symbol) [0x00007FF7030757FA]\n\t(No symbol) [0x00007FF70304FA85]\n\t(No symbol) [0x00007FF7030F2B17]\n\t(No symbol) [0x00007FF70310B1D1]\n\t(No symbol) [0x00007FF7030EB823]\n\t(No symbol) [0x00007FF7030B75E8]\n\t(No symbol) [0x00007FF7030B8751]\n\tGetHandleVerifier [0x00007FF7035647BD+3129501]\n\tGetHandleVerifier [0x00007FF7035B4D00+3458528]\n\tGetHandleVerifier [0x00007FF7035AB05D+3418429]\n\tGetHandleVerifier [0x00007FF70333687B+844123]\n\t(No symbol) [0x00007FF7031E0AFF]\n\t(No symbol) [0x00007FF7031DC6D4]\n\t(No symbol) [0x00007FF7031DC86D]\n\t(No symbol) [0x00007FF7031CBD79]\n\tBaseThreadInitThunk [0x00007FFE7025257D+29]\n\tRtlUserThreadStart [0x00007FFE71E8AF08+40]\n\n", "trace": "  File \"C:\\Users\\MUKESH\\Desktop\\Automation_Tests\\test_cases.py\", line 18, in test_amazon_search_add_to_cart\n    search_box = WebDriverWait(driver, 20).until(\n  File \"C:\\Users\\MUKESH\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 96, in until\n    value = method(self._driver)\n  File \"C:\\Users\\MUKESH\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 84, in _predicate\n    return driver.find_element(*locator)\n  File \"C:\\Users\\MUKESH\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 748, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"C:\\Users\\MUKESH\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\MUKESH\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1729170675817, "stop": 1729170685620}], "start": 1729170671668, "stop": 1729170687684, "uuid": "36790896-f387-4655-8aab-5c0ce9faff0f", "historyId": "d10d81d91e3e0c908769d97da27c9acb", "testCaseId": "d10d81d91e3e0c908769d97da27c9acb", "fullName": "test_cases#test_amazon_search_add_to_cart", "labels": [{"name": "suite", "value": "test_cases"}, {"name": "host", "value": "DESKTOP-J0ED406"}, {"name": "thread", "value": "10464-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases"}]}